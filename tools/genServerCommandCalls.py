# -*- coding: utf-8 -*-

import os

commands = {
    "Open" : ["str", "u32", "u32"],
    "Close" : ["u32"],
    "Read" : ["u32", "u64"],
    "ReadDir" : ["str"],
    "ReadLink" : ["str"],
    "Write" : ["u32", "data"],
    "Seek" : ["u32", "u8", "i64"],
    "Allocate" : ["u32", "u32", "u64", "u64"],
    "GetAttr" : ["str"],
    "SetAttr" : ["str", "u8", "u64", "i64", "u32", "u8"],
    "Sync" : ["u32"],
    "Mkdir" : ["str", "u32"],
    "SymLink" : ["str", "str"],
    "Remove" : ["str"],
    "RmDir" : ["str"],
    "FsStat" : ["str"],
    "ReadAt" : ["u32","u64", "u64"],
    "WriteAt" : ["u32", "u64","data"],
    "CopyFileRange": ["u32", "u32", "u64", "u64","u64"],
    "Rename": ["str", "str", "u32"],
    "SetAttrByFD" : ["u32", "u8", "u64", "i64", "u32", "u8"],
}

typedecl = {
    "data": "= bufPool.Get().(*util.Buffer)",
    "str": "string",
    "u64": "uint64",
    "u32": "uint32",
    "u16": "uint16",
    "u8": "uint8",
    "i64": "int64",
    "i32": "int32",
    "i16": "int16",
    "i8": "int8",
}
    
outputFile = open(f'{os.path.dirname(os.path.abspath(__file__))}/../src/internal/server/wsfs/commandcalls.go', "w")
outputFile.write('''// Code generated by "genServerCommandCalls.py". DO NOT EDIT.
package wsfs

import (
	"encoding/binary"
	"errors"
	"io"
	"wsfs-core/internal/share/wsfsprotocol"
	"wsfs-core/internal/util"
)

func (s *session) doCommandCall(clientMark, cmd uint8, r io.Reader, writeCh chan<- *util.Buffer) (err error) {
	switch cmd {
''')

for key, value in commands.items():
    outputFile.write(f'case wsfsprotocol.Cmd{key}:\n')

    for i, v in enumerate(value):
        outputFile.write(f'    var v{i} {typedecl[v]}\n')
        if v == "data":
            outputFile.write(f'    _, err = io.Copy(v{i}, r)\n')
        elif v == "str":
            outputFile.write(f'    err = util.CopyStrFromReader(r, &v{i})\n')
        else:
            outputFile.write(f'    err = binary.Read(r, binary.LittleEndian, &v{i})\n')
        #if i != len(value) - 1 :
        outputFile.write(f'    if err != nil {{\n')
        #else:
        #    print(f'    if err != io.EOF {{')
        outputFile.write(f'        goto BadCmdFormat\n')
        outputFile.write(f'    }}\n')

    outputFile.write(f'    s.cmd{key}(clientMark, writeCh')
    if len(value) != 0 :
        outputFile.write(f', ')
    for i, v in enumerate(value):
        outputFile.write(f'v{i}')
        if i != len(value) - 1 :
            outputFile.write(f', ')
    outputFile.write(f')\n')

outputFile.write('''	default:
		err = errors.New("unknwon command")
		writeCh <- msg(clientMark, wsfsprotocol.ErrorInvail, "Unknwon command")
		s.wg.Done()
	}
	return
BadCmdFormat:
	writeCh <- msg(clientMark, wsfsprotocol.ErrorInvail, "Bad command format")
	s.wg.Done()
	return
}
''')

    